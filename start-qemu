#!/bin/bash
# https://github.com/ksanislo/docker-qemu
#

: ${ENABLE_DEBUG:='N'}
: ${ENABLE_USB:='Y'}
: ${ENABLE_USBTABLET:='N'}
: ${ENABLE_MACVLAN:='Y'}
: ${ENABLE_BRIDGE:='N'}
: ${ENABLE_BRIDGE_AUTO:='Y'}
: ${ENABLE_DHCP:='N'}

: ${ARCH:=$(uname -m)}
: ${CPU:='host'}
: ${MACHINE:='pc'}
: ${ACCEL:='kvm'}
: ${SMP:='2,cores=2,threads=1,sockets=1'}
: ${MEMORY:='512M'}
: ${BALLOON:=''}
: ${BOOT:='c'}
: ${VGA:='std'}
: ${DISPLAY:='vnc=:0'}
: ${MONITOR:='/data/qemu.monitor'}

: ${SDA:=''}
: ${FDA:=''}
: ${CDA:=''}

: ${CDROM:=''}

: ${BRIDGE_IFACES:=''}
: ${SELECTED_NETWORK:=''}

: ${DNSMASQ_CONF_DIR:='/etc/dnsmasq.d'}

dnsmasqCommand=( ${DNSMASQ:-/usr/sbin/dnsmasq} )
qemuCommand=( ${QEMU:-qemu-system-${ARCH}} )

log () {
  case "${1}" in
    INFO | WARNING | ERROR ) echo "${1}: ${@:2}";;
    DEBUG                  ) [[ ${ENABLE_DEBUG} -eq 1 ]] && echo "${1}: ${@:2}";;
    *                      ) echo "-- ${@}";;
  esac
}

ctoi () {
  printf %d "'${1}"
}

idFromChar () {
  echo $(($(ctoi ${1}) - 65))
}

idFromStr () {
  idFromChar "${1: -1}"
}

# Convert a value to megabytes if in human readable format
# Bare numbers are assumed to be MB by default.
toMegabytes() {
  awk \
    'BEGIN{IGNORECASE = 1}
    function ppwr(n,b,p) {printf "%u\n", n*b^p}
    /[0-9]$/{ppwr($1, 2, 0); next};
    /[0-9]B$/{ppwr($1, 2, -20); next};
    /Ki?B?$/{ppwr($1, 2, -10); next};
    /Mi?B?$/{ppwr($1, 2, 0); next};
    /Gi?B?$/{ppwr($1, 2, 10); next};
    /Ti?B?$/{ppwr($1, 2, 20); next}' <<< "${1}"
}

# ContainsElement: checks if first parameter is among the array given as second parameter
# returns 0 if the element is found in the list and 1 if not
# usage: containsElement $item $list
containsElement () {
  local e
  for e in "${@:2}"; do [[ "${e}" == "${1}" ]] && return 0; done
  return 1
}

# Generate random MAC address
genMAC () {
  hexchars="0123456789ABCDEF"
  end=$( for i in {1..8} ; do echo -n ${hexchars:$(( ${RANDOM} % 16 )):1} ; done | sed -e 's/\(..\)/:\1/g' )
  echo "FE:05${end}"
}

# atoi: Returns the integer representation of an IP arg, passed in ascii
# dotted-decimal notation (x.x.x.x)
atoi() {
  IP=${1}
  IPnum=0
  for (( i=0 ; i<4 ; ++i ))
  do
    ((IPnum+=${IP%%.*}*$((256**$((3-${i}))))))
    IP=${IP#*.}
  done
  echo ${IPnum}
}

# itoa: returns the dotted-decimal ascii form of an IP arg passed in integer
# format
itoa() {
  echo -n $(($(($(($((${1}/256))/256))/256))%256)).
  echo -n $(($(($((${1}/256))/256))%256)).
  echo -n $(($((${1}/256))%256)).
  echo $((${1}%256))
}

cidr2mask() {
  local i mask=""
  local full_octets=$((${1}/8))
  local partial_octet=$((${1}%8))

  for ((i=0;i<4;i+=1)); do
    if [ ${i} -lt ${full_octets} ]; then
      mask+=255
    elif [ ${i} -eq ${full_octets} ]; then
      mask+=$((256 - 2**(8-${partial_octet})))
    else
      mask+=0
    fi
    test ${i} -lt 3 && mask+=.
  done

  echo ${mask}
}

# Generates and returns a new IP and MASK in a superset (inmediate wider range)
# of the given IP/MASK
# usage: getNonConflictingIP IP MASK
# returns NEWIP MASK
getNonConflictingIP () {
    local IP="${1}"
    local CIDR="${2}"

    let "newCIDR=${CIDR}-1"

    local i=$(atoi ${IP})
    let "j=${i}^(1<<(32-${CIDR}))"
    local newIP=$(itoa j)

    echo ${newIP} ${newCIDR}
}

# generates unused, random names for macvlan or bridge devices
# usage: generateNetDevNames DEVICETYPE
#   DEVICETYPE must be either 'macvlan' or 'bridge'
# returns:
#   - bridgeXXXXXX if DEVICETYPE is 'bridge'
#   - macvlanXXXXXX, macvtapXXXXXX if DEVICETYPE is 'macvlan'
generateNetdevNames () {
  devicetype=${1}

  local netdevinterfaces=($(ip link show | awk "/${devicetype}/ { print \$2 }" | cut -d '@' -f 1 | tr -d :))
  local randomID=$(cat /dev/urandom | tr -dc 'a-f0-9' | fold -w 6 | head -n 1)

  # check if the device already exists and regenerate the name if so
  while containsElement "${devicetype}${randomID}" "${netdevinterfaces[@]}"; do randomID=$(cat /dev/urandom | tr -dc 'a-f0-9' | fold -w 6 | head -n 1); done

  echo "${randomID}"
}

setupBridge () {
  local iface="${1}"
  local mode="${2}"
  local deviceID=$(generateNetdevNames ${mode})
  local bridgeName="${mode}${deviceID}"

  if [[ ${mode} == "bridge" ]]; then
    brctl addbr "${bridgeName}"
    brctl addif "${bridgeName}" "${iface}"
  else # use macvlan devices by default
    vtapdev="macvtap${deviceID}"
    until $(ip link add link ${iface} name ${vtapdev} type macvtap mode bridge); do
      sleep 1
    done

    ip link set ${vtapdev} address "${MAC}"
    ip link set ${vtapdev} up

    # create a macvlan device for the host
    ip link add link ${iface} name ${bridgeName} type macvlan mode bridge
    ip link set ${bridgeName} up

    # create dev file (there is no udev in container: need to be done manually)
    IFS=: read major minor < <(cat /sys/devices/virtual/net/${vtapdev}/tap*/dev)
    mknod "/dev/${vtapdev}" c ${major} ${minor}
  fi

  # get a new IP for the guest machine in a broader network broadcast domain
  if ! [[ -z ${IP} ]]; then
    #newIP=($(getNonConflictingIP ${IP} ${CIDR}))
    ip address del "${IP}/${CIDR}" dev "${iface}"
    ip address add "${IP}/${CIDR}" dev "${bridgeName}"
    #ip address add "${newIP[0]}/${newIP[1]}" dev "${bridgeName}"
  fi

  ip link set dev "${bridgeName}" up

  echo ${deviceID}
}

setupDhcp () {
  # dnsmasq configuration:
  if [[ "${ENABLE_DHCP}" == 1 ]]; then
    log "INFO" "DHCP configured to serve IP ${IP}/${CIDR} via ${bridgeName[0]} (attached to container's ${iface})"
    dnsmasqCommand+=( 
      --dhcp-range=${IP},${IP}
      --dhcp-host=${MAC},,${IP},$(hostname -s),infinite
      --dhcp-option=option:netmask,$(cidr2mask ${CIDR})
    )
  else
    [[ "${ENABLE_BRIDGE}" == 1 ]] && log "INFO" "No DHCP enabled. The VM won't get the container IP(s)"
  fi
}

# Setup macvtap device to connect later the VM and setup a new macvlan devide
# to connect the host machine to the network
configureNetworks () {
  local i=0

  local GATEWAY=$(ip r | grep default | awk '{print $3}')
  local IP

  for iface in "${local_ifaces[@]}"; do

    IPs=( $(ip address show dev ${iface} | grep inet | awk '/inet / { print $2 }' | cut -f1 -d/) )
    #IPs=(${IPs})
    MAC=$(ip link show ${iface} | awk '/ether/ { print $2 }')
    log "DEBUG" "Container original MAC address: ${MAC}"

    # If the container has more than one IP configured in a given interface,
    # the user can select which one to use.
    # The SELECTED_NETWORK environment variable is used to select that IP.
    # This env variable must be in the form IP/MASK (e.g. 1.2.3.4/24).
    #
    # If this env variable is not set, the IP to be given to the VM is
    # the first in the list for that interface (default behaviour).

    if ! [[ -z "${SELECTED_NETWORK}" ]]; then
      local given_ip given_mask
      IFS=/ read given_ip given_mask <<< ${SELECTED_NETWORK}
      local given_addr=$(atoi ${given_ip})
      local given_mask=$((0xffffffff << (32 - ${given_mask}) & 0xffffffff))
      local given_broadcast=$((given_addr | ~given_mask & 0xffffffff))
      local given_network=$((given_addr & given_mask))

      for configured_ip in "${IPs[@]}"; do
        local configured_ip=$(atoi ${configured_ip})
        if [[ ${configured_ip} -gt ${given_network} && ${configured_ip} -lt ${given_broadcast} ]]; then
          IP=$(itoa ${configured_ip})
          log "INFO" "SELECTED_NETWORK (${SELECTED_NETWORK}) found with ip ${IP} in ${iface} interface."
        fi
      done
      [[ -z "${IP}" ]] && log "WARNING" "SELECTED_NETWORK (${SELECTED_NETWORK}) not found in ${iface} interface."
    else
      IP=${IPs[0]}
    fi

    local CIDR=$(ip address show dev ${iface} | awk "/inet ${IP}/ { print \$2 }" | cut -f2 -d/)

    # use container MAC address ($MAC) for tap device
    # and generate a new one for the local interface
    ip link set ${iface} down
    ip link set ${iface} address $(genMAC)
    ip link set ${iface} up

    # setup the bridge or macvtap (default) devices for bridging the VM and the
    # container

    if [[ ${ENABLE_MACVLAN} == 1 ]]; then
      deviceID=($(setupBridge ${iface} "macvlan"))
      bridgeName="macvlan${deviceID}"
      log "DEBUG" "bridgeName: ${bridgeName}"
      let fd=${i}+3
      qemuCommand+=( -netdev tap,id=net${i},vhost=on,fd=${fd} ${fd}\<\>/dev/macvtap${deviceID} )
    elif [[ ${ENABLE_BRIDGE} == 1 ]]; then
      deviceID=$(setupBridge ${iface} "bridge")
      bridgeName="bridge${deviceID}"
      log "DEBUG" "bridgeName: ${bridgeName}"
      qemuCommand+=( -netdev bridge,br=${bridgeName},id=net${i} )
    else # SLIRP Networking, FIXME can append ,hostfwd=tcp::$port-:$port,hostfwd=udp::$port-:$port
      qemuCommand+=( -netdev user,hostname=$(hostname),id=net${i} )
    fi

    setupDhcp
    qemuCommand+=( -device virtio-net,netdev=net${i},mac=${MAC} )
    let i++

  done
}

# MAIN

# Turn all boolean variables into a 1 or 0
for boolVar in ${!ENABLE_*} ${!DISABLE_*} ; do
  case "${!boolVar}" in
    [YyTt1]* ) VALUE=1;;
    [NnFf0]* ) VALUE=0;;
    *        ) log "ERROR" "${boolVar}=${!boolVar} : Not a boolean value."; exit 1;;
  esac
  eval ${boolVar}=${VALUE}
done

# Debugging mode
if [ "${1}" = "bash" ]; then
  export ENABLE_DEBUG=1
  log "DEBUG" "Entering debug shell."
  exec bash
fi

[[ ! -z "${CPU}" ]]            && qemuCommand+=( -cpu ${CPU} )
[[ ! -z "${MACHINE}" ]]        && qemuCommand+=( -machine ${MACHINE} )
[[ ! -z "${ACCEL}" ]]          && qemuCommand+=( -accel ${ACCEL} )
[[ ! -z "${SMP}" ]]            && qemuCommand+=( -smp ${SMP} )
[[ ! -z "${MEMORY}" ]]         && qemuCommand+=( -m ${MEMORY} )
[[ ! -z "${BOOT}" ]]           && qemuCommand+=( -boot ${BOOT} )
[[ ! -z "${VGA}" ]]            && qemuCommand+=( -vga ${VGA} )
[[ ! -z "${DISPLAY}" ]]        && qemuCommand+=( -display ${DISPLAY} )
[[ ! -z "${MONITOR}" ]]        && qemuCommand+=( -monitor unix:${MONITOR},server,nowait )
[[ ! -z "${BALLOON}" ]]        && qemuCommand+=( -device virtio-balloon )
[[ ${ENABLE_USB} == 1 ]]       && qemuCommand+=( -usb  )
[[ ${ENABLE_USBTABLET} == 1 ]] && qemuCommand+=( -device usb-tablet )
[[ ! -z "${CDROM}" ]]          && qemuCommand+=( -${blkDevice,,} ${!blkDevice} )

# Map any block devices which have been defined in the following
for blkDevice in ${!CD*} ${!FD*} ${!HD*} ${!SD*}; do
  [[ "${blkDevice}" == CD[A-D] ]] && [[ ! -z "${!blkDevice}" ]] && qemuCommand+=( -drive file=${!blkDevice},media=cdrom,index=$(idFromStr ${blkDevice}) )
  [[ "${blkDevice}" == FD[AB] ]] && [[ ! -z "${!blkDevice}" ]] && qemuCommand+=( -${blkDevice,,} ${!blkDevice} )
  if [[ "${blkDevice}" == [HS]D[A-Z] ]] && [[ ! -z "${!blkDevice}" ]]; then
    if [[ "${blkDevice}" == HD[A-Z] ]]; then
      [[ $hasVirtIOBus != 1 ]] && qemuCommand+=( -device virtio-blk ) ; hasVirtIOBus=1
      qemuCommand+=( -device -device virtio-blk,drive=${blkDevice,,} )
    elif [[ "${blkDevice}" == SD[A-Z] ]]; then
      [[ $hasScsiBus != 1 ]] && qemuCommand+=( -device virtio-scsi ) ; hasScsiBus=1
      qemuCommand+=( -device scsi-hd,drive=${blkDevice,,} )
    fi
    qemuCommand+=( -drive file=${!blkDevice},index=$(idFromStr ${blkDevice}),media=disk,discard=unmap,detect-zeroes=unmap,if=none,id=${blkDevice,,} ) 
  fi
done

if [[ ${ENABLE_BRIDGE_AUTO} -eq 1 ]]; then
  # Get all interfaces:
  local_ifaces=($(ip link show | grep -v noop | grep state | grep -v LOOPBACK | awk '{print $2}' | tr -d : | sed 's/@.*$//'))
  local_bridges=($(brctl show | tail -n +2 | awk '{print $1}'))
  # Get non-bridge interfaces:
  for i in "${local_bridges[@]}"
  do
    local_ifaces=(${local_ifaces[@]//*$i*})
  done
else
  local_ifaces=(${BRIDGE_IFACES})
fi

DEFAULT_ROUTE=$(ip route | grep default | awk '{print $3}')

configureNetworks

if [[ "${ENABLE_DHCP}" == 1 ]]; then
  # Hack for guest VMs complaining about "bad udp checksums in 5 packets"
  iptables -A POSTROUTING -t mangle -p udp --dport bootpc -j CHECKSUM --checksum-fill

  # Build DNS options from container /etc/resolv.conf
  nameservers=($(grep nameserver /etc/resolv.conf | sed 's/nameserver //'))
  searchdomains=$(grep search /etc/resolv.conf | sed 's/search //' | sed 's/ /,/g')
  domainname=$(echo $searchdomains | awk -F"," '{print $1}')

  for nameserver in "${nameservers[@]}"; do
    [[ -z ${DNS_SERVERS} ]] && DNS_SERVERS=${nameserver} || DNS_SERVERS="${DNS_SERVERS},${nameserver}"
  done
  dnsmasqCommand+=( 
    --dhcp-option=option:dns-server,${DNS_SERVERS}
    --dhcp-option=option:router,${DEFAULT_ROUTE}
    --dhcp-option=option:domain-search,${searchdomains}
    --dhcp-option=option:domain-name,${domainname}
  )
  [[ -z $(hostname -d) ]] || dnsmasqCommand+=( --dhcp-option=option:domain-name,$(hostname -d) )
  log "INFO" "Lauching ${DNSMASQ}"
  log "DEBUG" "Command line: ${dnsmasqCommand[@]}"
  eval exec ${dnsmasqCommand[@]}
fi

log "INFO" "Launching ${QEMU}"
log "DEBUG" "Command line: ${qemuCommand[@]} $@" 

# Send our desired balloon size to the VM, it should re-adjust once the drivers are ready.
# Spawn as a grandchild to prevent a post-exec zombie state.
[[ ! -z "${BALLOON}" ]] && [[ ! -z "${MONITOR}" ]] && (( sleep 5s; socat - UNIX-CONNECT:${MONITOR} <<< "balloon $(toMegabytes ${BALLOON})" ) & disown ) & disown

eval exec ${qemuCommand[@]} $@

